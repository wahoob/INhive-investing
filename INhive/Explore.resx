<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label17.Text" xml:space="preserve">
    <value>Although the stock market may have its ups and downs in the short term, investing is a great way to build wealth in the long term. Be sure that you’re investing smartly with a strategy that suits your financial goals, and keep your focus on your long-term goals to avoid making decisions based on short-term panic.</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>Understanding supply and demand is easy. What is more difficult to understand is what makes people like a particular stock and dislike another stock. The market, after all, is a reflection of how companies and industries are valued in our society. And as human beings, our perception of value is constantly changing. This comes down to figuring out what news is positive for a company and what news is negative. The factors that affect stock prices fall under a range of categories, such as: </value>
  </data>
  <data name="label14.Text" xml:space="preserve">
    <value>Now that we have the basics covered, let’s dive into the next concept. In stock market, some companies have been selling their shares there for years. You can buy a share that has been bought and sold multiple times before – we call this the secondary market. The primary market would be where new shares are traded for the first time. This is what we call an Initial Public Offering (IPO).</value>
  </data>
  <data name="label13.Text" xml:space="preserve">
    <value>Stock prices are determined by the supply and demand in the market. If more people want to buy a stock (demand) than sell it (supply), then the price moves up. On the other hand, if more people wanted to sell a stock than buy it, there would be greater supply than demand, and the price would fall.</value>
  </data>
  <data name="label10.Text" xml:space="preserve">
    <value>So, stock market is basically a bunch of people buying and selling little bits of companies based on how much they think these bits will be worth in the future. Stock market in every country has an index, what these indexes do is assess a whole bunch of stock prices and bundle them into one clean number like a score. So, indexes are like stock market scoreboards. If you wanna know how the stock market is doing, you follow what is happening to its index.</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>Let’s imagine that a company is like a pizza, and it’s been cut into many slices. The owner of this company wants to raise money, by selling a few slices on the food market, and keeping the majority to themselves. If you were to buy a slice, that would mean that you own a portion of their pizza. If the price of that pizza were to increase, so would the price of your individual slice – which you can now re-sell at a higher price than which you bought it. In this example, the slices represent stocks, the full pizza represents the company, and the food market represents – you guessed it, the stock market.</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Investing in the stock market is a great way to create wealth and financial independence. But what is the stock market, and how does it work? With so many charts and numbers, it’s easy to feel intimidated, so let’s break it down into simpler terms.</value>
  </data>
  <data name="label22.Text" xml:space="preserve">
    <value>This information is for educational purposes only and is not a recommendation or a solicitation to invest. The value of investments can go up and down and involve risk. Thndr does not provide investment advice and individual investors should make their own decisions based on their research or seek independent advice. Thndr is the trading name of Thndr Securities Brokerage which is authorized and regulated by the Financial Regulatory Authority (FRA). Registered in Egypt (no. 804).</value>
  </data>
</root>